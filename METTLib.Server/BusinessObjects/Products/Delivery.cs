// Generated 16 Nov 2021 11:23 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Products
{
    [Serializable]
    public class Delivery
     : SingularBusinessBase<Delivery>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> DeliveryIDProperty = RegisterProperty<int>(c => c.DeliveryID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int DeliveryID
        {
            get { return GetProperty(DeliveryIDProperty); }
        }

        public static PropertyInfo<int?> DeliveryTypeIDProperty = RegisterProperty<int?>(c => c.DeliveryTypeID, "Delivery Type", null);
        /// <summary>
        /// Gets and sets the Delivery Type value
        /// </summary>
        [Display(Name = "Delivery Type", Description = ""),
        Required(ErrorMessage = "Delivery Type required")]
        public int? DeliveryTypeID
        {
            get { return GetProperty(DeliveryTypeIDProperty); }
            set { SetProperty(DeliveryTypeIDProperty, value); }
        }

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "Product", 0);
        /// <summary>
        /// Gets and sets the Product value
        /// </summary>
        [Display(Name = "Product", Description = ""),
        Required(ErrorMessage = "Product required")]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
            set { SetProperty(ProductIDProperty, value); }
        }

        public static PropertyInfo<int> UserIDProperty = RegisterProperty<int>(c => c.UserID, "User", 0);
        /// <summary>
        /// Gets and sets the User value
        /// </summary>
        [Display(Name = "User", Description = ""),
        Required(ErrorMessage = "User required")]
        public int UserID
        {
            get { return GetProperty(UserIDProperty); }
            set { SetProperty(UserIDProperty, value); }
        }
        public static PropertyInfo<String> DeliiveryTypeProperty = RegisterProperty<String>(c => c.DeliiveryType, "Deliivery Type", "");
        /// <summary>
        /// Gets and sets the Deliivery Type value
        /// </summary>
        [Display(Name = "Deliivery Type", Description = ""),
        StringLength(50, ErrorMessage = "Deliivery Type cannot be more than 50 characters")]
        public String DeliiveryType
        {
            get { return GetProperty(DeliiveryTypeProperty); }
            set { SetProperty(DeliiveryTypeProperty, value); }
        }
        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = ""),
        StringLength(50, ErrorMessage = "Product Name cannot be more than 50 characters")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(DeliveryIDProperty);
        }

        public override string ToString()
        {
            if (this.DeliveryID.ToString().Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Delivery");
                }
                else
                {
                    return String.Format("Blank {0}", "Delivery");
                }
            }
            else
            {
                return this.DeliveryID.ToString();
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewDelivery() method.
        }

        public static Delivery NewDelivery()
        {
            return DataPortal.CreateChild<Delivery>();
        }

        public Delivery()
        {
            MarkAsChild();
        }

        internal static Delivery GetDelivery(SafeDataReader dr)
        {
            var d = new Delivery();
            d.Fetch(dr);
            return d;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(DeliveryIDProperty, sdr.GetInt32(i++));
                LoadProperty(DeliveryTypeIDProperty, Singular.Misc.ZeroNothing(sdr.GetInt32(i++)));
                LoadProperty(ProductIDProperty, sdr.GetInt32(i++));
                LoadProperty(UserIDProperty, sdr.GetInt32(i++));
                LoadProperty(DeliiveryTypeProperty, sdr.GetString(i++));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, DeliveryIDProperty);

            cm.Parameters.AddWithValue("@DeliveryTypeID", GetProperty(DeliveryTypeIDProperty));
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
            cm.Parameters.AddWithValue("@UserID", GetProperty(UserIDProperty));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(DeliveryIDProperty, scm.Parameters["@DeliveryID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@DeliveryID", GetProperty(DeliveryIDProperty));
        }

        #endregion

    }

}